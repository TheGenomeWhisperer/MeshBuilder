public class WoDM
{
    public WoDM() {}
    
    public static Vector3[] GetDraenorMesh(Vector3 destination, bool factionIsHorde)
    {
        List<Vector3> location = new List<Vector3>();
        // Vector3 generic = new Vector3(0f,0f,0f);
        // bool collectAll = (generic == destination ? true : false);
        if (factionIsHorde)
        {
            // Horde Shipyard
            Vector3[] list0 = new Vector3[]{new Vector3(5226.465f, 5103.418f, 5.177947f),new Vector3(5228.128f, 5099.702f, 5.177947f),new Vector3(5231.669f, 5091.785f, 3.380589f),new Vector3(5235.001f, 5084.335f, 3.268428f),new Vector3(5238.147f, 5076.524f, 3.26907f),new Vector3(5241.06f, 5068.825f, 3.269417f),new Vector3(5243.971f, 5061.015f, 3.269331f),new Vector3(5246.577f, 5053.362f, 3.269719f),new Vector3(5249.292f, 5045.341f, 3.270111f),new Vector3(5252.161f, 5036.862f, 3.279385f),new Vector3(5254.744f, 5029.231f, 3.281622f),new Vector3(5257.496f, 5021.1f, 3.281622f),new Vector3(5260.215f, 5013.065f, 4.370923f),new Vector3(5262.909f, 5005.366f, 5.023382f),new Vector3(5268.368f, 4999.576f, 5.022273f),new Vector3(5276.881f, 4999.54f, 5.02261f),new Vector3(5285.001f, 5001.184f, 5.024286f),new Vector3(5293.423f, 5002.99f, 5.022233f),new Vector3(5301.736f, 5005.184f, 5.035467f),new Vector3(5309.441f, 5007.458f, 5.030182f),new Vector3(5317.661f, 5009.984f, 5.145557f),new Vector3(5325.29f, 5012.334f, 5.024195f),new Vector3(5333.139f, 5014.767f, 5.022141f),new Vector3(5340.74f, 5018.779f, 5.02382f),new Vector3(5346.704f, 5024.007f, 5.02382f),new Vector3(5347.966f, 5031.805f, 5.021767f),new Vector3(5346.603f, 5039.763f, 5.022386f),new Vector3(5344.565f, 5048.033f, 3.454549f),new Vector3(5342.144f, 5055.838f, 3.280035f),new Vector3(5339.57f, 5063.75f, 3.281292f),new Vector3(5336.929f, 5071.516f, 3.279427f),new Vector3(5334.284f, 5079.233f, 3.271114f),new Vector3(5331.647f, 5086.923f, 3.271114f),new Vector3(5328.998f, 5094.546f, 3.269061f),new Vector3(5325.908f, 5101.985f, 3.271765f),new Vector3(5322.469f, 5110.187f, 3.269712f),new Vector3(5319.396f, 5117.553f, 3.365296f),new Vector3(5316.603f, 5124.887f, 3.266913f),new Vector3(5313.506f, 5133.693f, 3.26486f),new Vector3(5310.355f, 5141.261f, 3.262807f),new Vector3(5306.733f, 5149.109f, 5.007558f),new Vector3(5304.183f, 5154.635f, 5.179315f),new Vector3(5313.919f, 4999.146f, 5.031353f),new Vector3(5316.989f, 4991.349f, 4.590706f),new Vector3(5319.994f, 4983.496f, 3.261628f),new Vector3(5322.344f, 4976.021f, 3.262311f),new Vector3(5324.748f, 4968.041f, 3.454753f),new Vector3(5327.033f, 4960.454f, 3.355773f),new Vector3(5329.424f, 4952.516f, 3.354637f),new Vector3(5331.841f, 4944.493f, 3.814888f),new Vector3(5333.223f, 4939.904f, 4.313459f),new Vector3(5336.783f, 4942.057f, 3.987006f),new Vector3(5344.255f, 4946.576f, 3.750103f),new Vector3(5350.35f, 4952.551f, 3.886631f),new Vector3(5355.614f, 4958.595f, 3.89053f),new Vector3(5359.577f, 4965.995f, 4.598823f),new Vector3(5363.436f, 4974.154f, 6.17427f),new Vector3(5368.585f, 4980.556f, 6.895992f),new Vector3(5375.232f, 4985.608f, 6.570148f),new Vector3(5381.774f, 4990.581f, 6.060965f),new Vector3(5388.921f, 4995.311f, 5.513795f),new Vector3(5395.682f, 4999.771f, 5.192679f),new Vector3(5402.694f, 5004.194f, 4.248222f),new Vector3(5409.237f, 5008.819f, 3.37357f),new Vector3(5415.642f, 5013.987f, 3.103029f),new Vector3(5272.541f, 4938.235f, 8.941624f),new Vector3(5276.913f, 4938.519f, 7.778503f),new Vector3(5285.406f, 4939.062f, 5.868029f),new Vector3(5293.458f, 4939.168f, 5.076531f),new Vector3(5301.167f, 4940.197f, 3.863107f),new Vector3(5309.34f, 4942.798f, 2.662547f),new Vector3(5337.066f, 4935.606f, 5.080146f),new Vector3(5338.462f, 4933.899f, 5.410695f),new Vector3(5343.997f, 4926.92f, 7.379288f),new Vector3(5349.408f, 4921.278f, 10.13784f),new Vector3(5355.425f, 4915.238f, 13.54762f),new Vector3(5361.338f, 4909.301f, 18.02958f),new Vector3(5367.602f, 4904.31f, 22.16294f),new Vector3(5375.418f, 4902.233f, 25.21158f),new Vector3(5381.681f, 4907.238f, 26.89433f),new Vector3(5386.229f, 4914.455f, 30.41585f),new Vector3(5387.525f, 4922.56f, 33.92372f),new Vector3(5386.115f, 4930.876f, 35.5632f),new Vector3(5387.724f, 4938.739f, 35.5954f),new Vector3(5391.915f, 4946.38f, 34.34087f),new Vector3(5395.266f, 4953.227f, 32.81433f),new Vector3(5395.794f, 4955.711f, 32.35955f),new Vector3(5392.45f, 4935.087f, 36.59919f),new Vector3(5395.52f, 4934.9f, 37.70484f),new Vector3(5403.881f, 4934.011f, 40.71118f),new Vector3(5410.981f, 4929.611f, 43.73222f),new Vector3(5416.117f, 4922.526f, 45.84546f),new Vector3(5419.612f, 4915.138f, 48.19114f),new Vector3(5406.811f, 4930.285f, 42.55336f),new Vector3(5412.805f, 4923.976f, 45.10557f),new Vector3(5418.313f, 4918.179f, 47.16678f),new Vector3(5424.307f, 4911.87f, 50.2869f),new Vector3(5429.672f, 4905.676f, 53.36563f),new Vector3(5435.39f, 4899.387f, 56.10091f),new Vector3(5441.695f, 4894.402f, 58.92585f),new Vector3(5448.286f, 4889.825f, 62.17897f),new Vector3(5455.419f, 4885.038f, 66.39535f),new Vector3(5462.308f, 4880.404f, 70.21847f),new Vector3(5469.073f, 4875.818f, 74.21414f),new Vector3(5475.306f, 4870.763f, 77.82598f),new Vector3(5480.802f, 4864.634f, 82.19171f),new Vector3(5485.893f, 4858.343f, 87.268f),new Vector3(5489.982f, 4850.61f, 93.11131f),new Vector3(5491.314f, 4842.559f, 98.48849f),new Vector3(5490.236f, 4834.032f, 103.627f),new Vector3(5489.203f, 4825.97f, 106.6963f),new Vector3(5487.678f, 4817.781f, 109.5393f),new Vector3(5483.123f, 4810.932f, 111.7618f),new Vector3(5477.436f, 4805.284f, 113.4704f),new Vector3(5471.529f, 4799.627f, 115.9368f),new Vector3(5466.415f, 4793.621f, 118.6344f),new Vector3(0f,0f,0f)};        
            
            // Sorting closest nodes
            if (destination.Distance2D(list0[MeshM.GetMeshIndex(list0,destination)]) < 20f)
            {
                return list0;
            }
            location.AddRange(list0);
            
            // Neutral pathing
            // Gul'dan, under the Dark Portal
            Vector3[] list2 = new Vector3[]{new Vector3(4117.031f, -2376.822f, 78.83586f),new Vector3(4113.069f, -2376.832f, 79.05174f),new Vector3(4109.1f, -2376.841f, 79.44233f),new Vector3(4104.893f, -2376.851f, 79.6423f),new Vector3(4100.98f, -2376.86f, 79.64076f),new Vector3(4097.55f, -2376.868f, 79.646f),new Vector3(4093.35f, -2376.878f, 79.65382f),new Vector3(4089.913f, -2376.886f, 79.65726f),new Vector3(4085.825f, -2376.896f, 79.66137f),new Vector3(4081.646f, -2376.906f, 77.60734f),new Vector3(4077.523f, -2376.916f, 75.34579f),new Vector3(4073.532f, -2376.925f, 74.98172f),new Vector3(4069.727f, -2377.579f, 74.98868f),new Vector3(4067.434f, -2380.789f, 74.98933f),new Vector3(4067.037f, -2384.726f, 74.98939f),new Vector3(4068.927f, -2387.505f, 74.98939f),new Vector3(4072.562f, -2386.919f, 74.10859f),new Vector3(4076.432f, -2387.012f, 70.74607f),new Vector3(4080.477f, -2387.114f, 69.53637f),new Vector3(4084.335f, -2388.188f, 69.53637f),new Vector3(4087.126f, -2390.922f, 69.53642f),new Vector3(4089.559f, -2393.585f, 69.53488f),new Vector3(4091.527f, -2397.232f, 69.52975f),new Vector3(4094.285f, -2400.204f, 69.59004f),new Vector3(4095.399f, -2403.69f, 69.82324f),new Vector3(4094.589f, -2407.356f, 69.51762f),new Vector3(4092.061f, -2410.864f, 69.5323f),new Vector3(4089.119f, -2413.675f, 69.5363f),new Vector3(4085.919f, -2416.011f, 69.53687f),new Vector3(4082.862f, -2418.803f, 69.53687f),new Vector3(4079.792f, -2421.612f, 69.53687f),new Vector3(4076.833f, -2424.172f, 69.53532f),new Vector3(4073.868f, -2426.737f, 69.53378f),new Vector3(4070.774f, -2429.333f, 69.85598f),new Vector3(4067.518f, -2431.402f, 69.82574f),new Vector3(4064.256f, -2429.49f, 69.61079f),new Vector3(4061.411f, -2426.505f, 69.53375f),new Vector3(4058.471f, -2423.988f, 69.53473f),new Vector3(4055.511f, -2421.471f, 69.53516f),new Vector3(4052.343f, -2418.779f, 69.53664f),new Vector3(4049.18f, -2416.09f, 69.53668f),new Vector3(4046.292f, -2413.545f, 69.53695f),new Vector3(4043.591f, -2410.825f, 69.53761f),new Vector3(4041.007f, -2407.952f, 69.86374f),new Vector3(4038.351f, -2404.962f, 69.83506f),new Vector3(4038.422f, -2401.016f, 69.835f),new Vector3(4040.812f, -2398.448f, 69.8647f),new Vector3(4062.021f, -2386.419f, 74.98956f),new Vector3(4066.068f, -2386.689f, 74.98964f),new Vector3(4068.414f, -2386.92f, 74.98964f),new Vector3(4067.727f, -2388.568f, 74.98973f),new Vector3(4066.908f, -2392.406f, 75.76965f),new Vector3(4066.594f, -2396.11f, 77.15092f),new Vector3(4046.742f, -2391.365f, 69.53956f),new Vector3(4049.598f, -2388.784f, 69.53956f),new Vector3(4053.205f, -2387.282f, 69.53802f),new Vector3(4057.48f, -2386.891f, 71.20423f),new Vector3(4059.86f, -2386.85f, 73.27399f),new Vector3(4119.103f, -2376.414f, 78.8f),new Vector3(0f,0f,0f)};
            
            // Sorting closest nodes
            if (destination.Distance2D(list2[MeshM.GetMeshIndex(list2,destination)]) < 20f)
            {
                return list2;
            }
            location.AddRange(list2);
            
        }
        else if (!factionIsHorde)
        {
            // Alliance only pathing
        }
        // Neutral Mesh Zones.
        // Top of Bladespire Tower
        Vector3[] list1 = new Vector3[]{new Vector3(6753.4f, 5831.2f, 325.2f),new Vector3(6751.9f, 5838.5f, 325.2f),new Vector3(6750.1f, 5845.8f, 325.2f),new Vector3(6748.2f, 5853.5f, 325.2f),new Vector3(6747.14f, 5864.272f, 325.2144f),new Vector3(6750.558f, 5868.425f, 325.3f),new Vector3(6754.004f, 5872.613f, 325.577f),new Vector3(6757.37f, 5876.702f, 327.131f),new Vector3(6760.591f, 5880.616f, 329.3791f),new Vector3(6763.806f, 5884.522f, 331.6271f),new Vector3(6767.086f, 5888.251f, 333.7519f),new Vector3(6770.712f, 5891.779f, 335.6977f),new Vector3(6774.749f, 5894.941f, 337.6636f),new Vector3(6778.867f, 5897.974f, 339.4899f),new Vector3(6783.058f, 5901.061f, 341.2484f),new Vector3(6787.525f, 5904.044f, 342.9428f),new Vector3(6791.396f, 5906.171f, 344.3062f),new Vector3(6796.32f, 5907.916f, 345.4648f),new Vector3(6801.521f, 5908.906f, 345.5328f),new Vector3(6806.66f, 5909.076f, 345.595f),new Vector3(6811.645f, 5909.226f, 345.6552f),new Vector3(6816.996f, 5908.966f, 345.6516f),new Vector3(6822.276f, 5908.371f, 345.6373f),new Vector3(6827.199f, 5907.703f, 345.6271f),new Vector3(6832.564f, 5906.975f, 345.6235f),new Vector3(6837.517f, 5906.261f, 345.6252f),new Vector3(6842.719f, 5904.869f, 345.6252f),new Vector3(6847.678f, 5902.918f, 345.6231f),new Vector3(6852.264f, 5900.667f, 345.6231f),new Vector3(6856.451f, 5897.707f, 345.619f),new Vector3(6860.334f, 5894.637f, 345.615f),new Vector3(6864.266f, 5891.529f, 345.7069f),new Vector3(6868.385f, 5888.272f, 345.9134f),new Vector3(6872.64f, 5884.909f, 346.127f),new Vector3(6876.644f, 5881.743f, 347.4779f),new Vector3(6880.64f, 5878.48f, 349.5873f),new Vector3(6884.797f, 5874.775f, 351.8573f),new Vector3(6888.743f, 5871.215f, 353.8832f),new Vector3(6892.48f, 5867.644f, 355.6541f),new Vector3(6895.507f, 5863.21f, 357.437f),new Vector3(6896.864f, 5858.185f, 359.261f),new Vector3(6897.297f, 5853.103f, 359.3959f),new Vector3(6897.503f, 5848.104f, 359.4045f),new Vector3(6898.049f, 5843.118f, 359.416f),new Vector3(6899.325f, 5838.245f, 359.4266f),new Vector3(6900.866f, 5833.063f, 359.4266f),new Vector3(6902.065f, 5827.81f, 359.4266f),new Vector3(6902.78f, 5822.517f, 359.4266f),new Vector3(6903.399f, 5817.293f, 359.4266f),new Vector3(6903.565f, 5812.093f, 359.4266f),new Vector3(6903.261f, 5806.599f, 359.4266f),new Vector3(6901.654f, 5801.547f, 359.4266f),new Vector3(6899.86f, 5796.926f, 359.4266f),new Vector3(6898.245f, 5791.815f, 359.4266f),new Vector3(6896.565f, 5787.006f, 359.4266f),new Vector3(6894.494f, 5782.473f, 359.4266f),new Vector3(6892.058f, 5777.597f, 359.4266f),new Vector3(6889.663f, 5772.822f, 361.2918f),new Vector3(6886.867f, 5768.245f, 364.0428f),new Vector3(6883.556f, 5764.44f, 366.7577f),new Vector3(6879.581f, 5760.998f, 369.5363f),new Vector3(6875.476f, 5757.76f, 372.3252f),new Vector3(6871.355f, 5754.535f, 375.2516f),new Vector3(6867.281f, 5751.399f, 378.0686f),new Vector3(6863.308f, 5748.341f, 380.2465f),new Vector3(6858.401f, 5745.633f, 382.8427f),new Vector3(6853.616f, 5743.494f, 385.2711f),new Vector3(6849.005f, 5741.433f, 387.5061f),new Vector3(6844.209f, 5739.289f, 389.9729f),new Vector3(6838.979f, 5737.593f, 392.6599f),new Vector3(6833.772f, 5736.631f, 395.3176f),new Vector3(6829.127f, 5735.95f, 397.7802f),new Vector3(6823.475f, 5735.712f, 400.8165f),new Vector3(6818.708f, 5737.63f, 401.7113f),new Vector3(6815.827f, 5741.921f, 401.7113f),new Vector3(6815.984f, 5747.142f, 403.5612f),new Vector3(6816.161f, 5752.174f, 405.9895f),new Vector3(6816.354f, 5757.667f, 409.2573f),new Vector3(6816.543f, 5763.042f, 410.1055f),new Vector3(6816.674f, 5767.981f, 410.1419f),new Vector3(6815.752f, 5773.287f, 410.149f),new Vector3(6813.101f, 5776.91f, 410.149f),new Vector3(6809.066f, 5779.963f, 410.149f),new Vector3(6804.994f, 5783.19f, 410.149f),new Vector3(6801.214f, 5786.705f, 410.149f),new Vector3(6797.824f, 5790.691f, 410.149f),new Vector3(6794.65f, 5794.466f, 410.149f),new Vector3(6791.104f, 5798.803f, 410.149f),new Vector3(6782.897f, 5818.26f, 410.149f),new Vector3(6782.256f, 5823.623f, 410.149f),new Vector3(6782.208f, 5828.922f, 410.149f),new Vector3(6782.726f, 5833.742f, 410.149f),new Vector3(6783.45f, 5838.841f, 410.149f),new Vector3(6784.207f, 5844.12f, 410.149f),new Vector3(6785.179f, 5849.452f, 410.2917f),new Vector3(6786.109f, 5854.333f, 410.4536f),new Vector3(6787f, 5859.008f, 410.6021f),new Vector3(6788.001f, 5864.262f, 410.9413f),new Vector3(6788.988f, 5869.438f, 413.0421f),new Vector3(6789.754f, 5874.5f, 414.14f),new Vector3(6789.875f, 5879.736f, 415.1671f),new Vector3(6790.051f, 5885.129f, 416.3246f),new Vector3(6752.3f, 5822.8f, 325.2f),new Vector3(0f,0f,0f)};
        // Special Node on edge of Mesh is the last Vector point.
        
        // Sorting closest nodes
        if (destination.Distance2D(list1[MeshM.GetMeshIndex(list1,destination)]) < 20f)
        {
            return list1;
        }
        location.AddRange(list1);
        
        // Converting list into a less bloated Array for later use.
        Vector3[] result = new Vector3[location.Count];
        for (int i = 0; i < result.Length; i++)
        {
            result[i] = location[i];
        }
        return result;
    }
}